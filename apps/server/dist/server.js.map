{"version":3,"sources":["../src/server.ts","../src/routes/animal.route.ts","../src/controllers/animal.controller.ts"],"sourcesContent":["import serverless from \"serverless-http\";\nimport express, { Request, Response } from \"express\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\n\nimport { AUTHOR } from \"utils\";\nimport animalRoutes from \"./routes/animal.route\";\n\nexport const app = express();\n\n// Middlewares\napp.use(bodyParser.json());\napp.use(cors());\n\n// Routes\napp.use(\"/animal\", animalRoutes);\n\napp.get(\"/\", (req: Request, res: Response) => {\n   res.json({\n      AUTHOR,\n      working: true,\n      message: `Hello World okss`,\n      secret: `SECRET: ${process.env.SECRET} ðŸ¤«`,\n   });\n});\n\nexport const handler = serverless(app);\n","import { Router } from \"express\";\nimport { get_animals } from \"../controllers/animal.controller\";\n\nconst route = Router();\n\n// get all animals\nroute.get(\"/\", get_animals);\n\nexport default route;\n","import { Request, Response } from \"express\";\nimport { HTTP_STATUS, HttpResponse } from \"types\";\n\nconst ANIMALS = [\n   { id: 1, name: \"Dog\", species: \"Canine\", habitat: \"Domestic\" },\n   { id: 2, name: \"Cat\", species: \"Feline\", habitat: \"Domestic\" },\n   { id: 3, name: \"Elephant\", species: \"Elephantidae\", habitat: \"Wild\" },\n   { id: 4, name: \"Lion\", species: \"Panthera leo\", habitat: \"Wild\" },\n   { id: 5, name: \"Monkey\", species: \"Primate\", habitat: \"Forest\" },\n];\n\nexport async function get_animals(_: Request, res: Response) {\n   const response = new HttpResponse({});\n   try {\n      response.animals = ANIMALS;\n      response.status = HTTP_STATUS.OK;\n      return res.status(response.status).json(response);\n   } catch (error) {\n      response.isError = true;\n      response.status = HTTP_STATUS.SERVICE_UNAVAILABLE;\n      response.message = \"Something went wrong\";\n      res.status(response.status).json(response);\n   }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAuB;AACvB,IAAAA,kBAA2C;AAC3C,yBAAuB;AACvB,kBAAiB;AAEjB,mBAAuB;;;ACLvB,qBAAuB;;;ACCvB,mBAA0C;AAE1C,IAAM,UAAU;AAAA,EACb,EAAE,IAAI,GAAG,MAAM,OAAO,SAAS,UAAU,SAAS,WAAW;AAAA,EAC7D,EAAE,IAAI,GAAG,MAAM,OAAO,SAAS,UAAU,SAAS,WAAW;AAAA,EAC7D,EAAE,IAAI,GAAG,MAAM,YAAY,SAAS,gBAAgB,SAAS,OAAO;AAAA,EACpE,EAAE,IAAI,GAAG,MAAM,QAAQ,SAAS,gBAAgB,SAAS,OAAO;AAAA,EAChE,EAAE,IAAI,GAAG,MAAM,UAAU,SAAS,WAAW,SAAS,SAAS;AAClE;AAEA,eAAsB,YAAY,GAAY,KAAe;AAC1D,QAAM,WAAW,IAAI,0BAAa,CAAC,CAAC;AACpC,MAAI;AACD,aAAS,UAAU;AACnB,aAAS,SAAS,yBAAY;AAC9B,WAAO,IAAI,OAAO,SAAS,MAAM,EAAE,KAAK,QAAQ;AAAA,EACnD,SAAS,OAAO;AACb,aAAS,UAAU;AACnB,aAAS,SAAS,yBAAY;AAC9B,aAAS,UAAU;AACnB,QAAI,OAAO,SAAS,MAAM,EAAE,KAAK,QAAQ;AAAA,EAC5C;AACH;;;ADpBA,IAAM,YAAQ,uBAAO;AAGrB,MAAM,IAAI,KAAK,WAAW;AAE1B,IAAO,uBAAQ;;;ADAR,IAAM,UAAM,gBAAAC,SAAQ;AAG3B,IAAI,IAAI,mBAAAC,QAAW,KAAK,CAAC;AACzB,IAAI,QAAI,YAAAC,SAAK,CAAC;AAGd,IAAI,IAAI,WAAW,oBAAY;AAE/B,IAAI,IAAI,KAAK,CAAC,KAAc,QAAkB;AAC3C,MAAI,KAAK;AAAA,IACN;AAAA,IACA,SAAS;AAAA,IACT,SAAS;AAAA,IACT,QAAQ,WAAW,QAAQ,IAAI,MAAM;AAAA,EACxC,CAAC;AACJ,CAAC;AAEM,IAAM,cAAU,uBAAAC,SAAW,GAAG;","names":["import_express","express","bodyParser","cors","serverless"]}